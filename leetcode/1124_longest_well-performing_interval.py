from typing import List
import sys
from timeit import Timer
from functools import reduce

class Solution:
    def longest_WPI_hashmap(self, hours):
        result = 0
        net_performance = 0

        # stores the first index where a specific net_performance is found
        location_memo = {}
        for end_idx, hour in enumerate(hours):
            net_performance = net_performance + 1 if hour > 8 else net_performance - 1

            # if we have a positive net_performance then our range is from 0 to end_idx
            if net_performance > 0:
                result = max(result, end_idx + 1)
            # Otherwise we need to see if we have improved compared to a previous index
            elif net_performance - 1 in location_memo:
                # If we did improve, then we have a valid range
                start_idx = location_memo[net_performance - 1]
                result = max(result, end_idx - start_idx)
            
            # If the current net_performance isn't in the memo, add it
            location_memo.setdefault(net_performance, end_idx)

        return result
            

    def longest_WPI_brute_force(self, hours):
        result = 0
        for i in range(len(hours)):
            score = 0
            for j in range(i, len(hours)):
                score = score + 1 if hours[j] > 8 else score -1
                if score > 0:
                    result = max(result, j - i + 1)
        return result

print(Solution().longest_WPI_hashmap([9,9,6,0,6,6,9]))
print(Solution().longest_WPI_hashmap([9,9,6,0,6,6,9,9,9,9,9,9]))
print(Solution().longest_WPI_hashmap([6,9,9]))
print(Solution().longest_WPI_hashmap([9,6,9]))
print(Solution().longest_WPI_hashmap([9,9,6]))
print(Solution().longest_WPI_hashmap([0,9,0]))
print(Solution().longest_WPI_hashmap([0,9]))
print(Solution().longest_WPI_hashmap([9,0,0]))
print(Solution().longest_WPI_hashmap([]))

print(Timer(lambda: 
        Solution().longest_WPI_hashmap([11,16,11,10,16,2,12,3,3,2,4,1,10,15,0,7,4,2,6,16,6,3,10,6,7,11,1,0,15,12,5,8,14,2,10,0,5,6,13,15,6,14,4,5,5,10,16,9,2,11,5,14,9,14,12,12,15,9,14,6,6,5,7,10,15,7,4,16,14,13,8,3,16,5,6,1,9,9,1,0,16,9,8,1,16,5,7,8,3,0,8,13,6,12,8,11,3,11,1,10,13,12,6,2,2,9,0,8,12,14,1,15,11,9,16,2,11,4,2,9,12,0,15,12,14,6,15,6,5,10,1,16,9,13,9,3,11,15,13,6,5,9,7,0,3,16,13,15,15,1,7,3,1,13,11,3,12,2,6,3,3,4,11,14,3,7,11,4,8,5,0,2,0,1,11,1,13,16,12,7,0,6,9,10,6,7,12,9,14,1,6,13,11,13,2,5,14,1,13,9,16,8,1,3,13,6,3,16,0,4,10,11,5,7,4,15,0,3,16,11,1,14,3,0,3,13,15,8,7,7,9,2,11,0,15,5,7,13,16,15,13,6,5,2,16,11,3,3,3,13,8,2,9,6,0,8,6,8,7,0,15,16,11,15,14,10,15,15,0,4,0,16,0,10,15,13,1,7,8,3,7,2,1,11,15,7,10,14,14,3,16,15,5,13,6,16,12,10,16,0,6,13,7,14,2,4,7,6,3,0,8,7,9,7,12,14,14,2,7,8,7,8,5,5,3,14,14,12,0,4,14,2,14,9,5,3,15,13,12,8,5,13,0,0,0,8,9,3,3,2,1,11,14,16,1,4,4,4,11,8,14,3,4,3,7,4,12,16,8,16,10,15,4,10,4,11,2,15,9,16,3,4,15,12,11,5,10,0,0,8,8,3,5,2,13,0,5,6,8,5,16,12,1,1,14,7,9,12,12,11,11,5,8,16,8,8,9,12,4,0,0,11,16,13,8,10,0,3,11,10,4,13,8,1,15,3,12,8,3,11,12,11,14,6,2,12,2,13,14,0,9,1,8,2,3,2,15,2,15,2,7,8,6,12,10,12,5,15,9,1,12,12,11,12,14,5,11,14,3,3,14,12,16,4,11,0,3,6,11,15,10,1,4,11,10,10,15,13,8,11,10,16,4,16,11,9,5,12,0,8,10,2,9,13,11,1,11,13,14,13,16,7,11,14,11,15,9,16,10,12,3,11,3,10,13,0,14,1,1,6,7,5,1,3,11,8,15,16,2,5,12,9,16,8,16,10,15,6,3,2,12,14,6,16,15,8,6,3,2,2,16,9,2,15,6,0,1,7,5,11,3,4,13,1,3,3,15,3,3,15,15,15,11,11,7,6,1,4,6,10,1,13,11,16,13,10,12,1,2,11,11,11,2,12,3,5,3,11,12,2,5,4,6,13,14,0,9,8,11,7,6,9,3,14,4,1,5,4,0,15,5,5,1,3,15,4,6,12,8,4,13,13,10,7,16,15,3,15,0,7,0,15,7,13,5,0,11,3,7,12,10,0,11,0,9,2,14,1,0,8,1,6,4,16,10,10,16,0,7,12,2,5,1,14,11,11,0,8,13,4,1,8,3,2,1,1,14,15,4,8,0,13,15,16,11,3,13,11,6,4,9,9,13,4,6,14,8,9,4,4,6,9,0,0,8,3,14,1,16,2,13,2,14,3,14,2,2,10,0,8,11,10,9,14,15,0,16,3,11,16,4,7,8,8,3,1,8,11,1,11,5,15,0,0,9,6,16,16,13,10,13,4,5,5,2,3,5,16,3,7,6,10,4,12,4,3,13,2,7,4,3,1,5,7,1,7,8,8,9,12,3,1,1,11,9,11,12,15,0,14,6,0,0,5,7,1,0,2,0,0,8,11,16,11,9,1,4,11,2,11,4,15,8,3,5,0,6,8,7,16,6,5,7,10,15,9,8,7,15,5,16,7,11,7,15,1,1,5,6,1,14,0,1,5,13,0,12,3,16,1,14,2,1,14,11,8,1,5,6,14,13,12,4,7,14,7,1,6,16,10,16,12,6,8,0,14,3,4,9,4,14,4,12,4,5,7,5,16,3,14,12,9,12,4,10,10,16,7,13,13,15,5,9,16,0,7,12,16,16,15,2,2,12,9,6,4,15,16,5,12,7,4,13,4,6,9,15,16,16,6,1,2,13,1,0,13,10,6,1,8,14,2,9,7,9,2,1,9,8,12,16,16,0,5,7,11,5,5,13,10,16,13,16,10,11,1,10,16,11,0])
    ).timeit(number=1))
